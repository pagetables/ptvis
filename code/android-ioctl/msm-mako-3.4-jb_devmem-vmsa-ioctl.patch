diff --git a/drivers/char/Kconfig b/drivers/char/Kconfig
index 00a07a0..556ff80 100644
--- a/drivers/char/Kconfig
+++ b/drivers/char/Kconfig
@@ -19,6 +19,14 @@ config DEVMEM
 	  system and most users should say Y here. You might say N if very
 	  security conscience or memory is tight.
 
+config DEVMEM_ARM_VMSA
+    bool "Expose ARM VMSA register values"
+    default n
+    depends on DEVMEM && ARM && CPU_32v7 && !ARM_LPAE
+    help
+      Provide access to the values of ttbr1 and ttcr as well as ttbr0 for
+      all processes through a memory character device ioctl.
+
 config DEVKMEM
 	bool "/dev/kmem virtual device support"
 	default y
diff --git a/drivers/char/mem.c b/drivers/char/mem.c
index 67e19b6..e41cc50 100644
--- a/drivers/char/mem.c
+++ b/drivers/char/mem.c
@@ -35,6 +35,10 @@
 # include <linux/efi.h>
 #endif
 
+#ifdef CONFIG_DEVMEM_ARM_VMSA
+#include <linux/sched.h>
+#endif
+
 static inline unsigned long size_inside_page(unsigned long start,
 					     unsigned long size)
 {
@@ -336,6 +340,89 @@ static int mmap_mem(struct file *file, struct vm_area_struct *vma)
 	}
 	return 0;
 }
+
+#ifdef CONFIG_DEVMEM_ARM_VMSA
+
+#define DEVMEM_IOCTL_MAGIC 'V'
+
+#define DEVMEM_IOCTL_TTBR0      _IO(DEVMEM_IOCTL_MAGIC, 1)
+#define DEVMEM_IOCTL_TTBR1      _IO(DEVMEM_IOCTL_MAGIC, 2)
+#define DEVMEM_IOCTL_TTBCR      _IO(DEVMEM_IOCTL_MAGIC, 3)
+#define DEVMEM_IOCTL_TTBR0_ALL  _IO(DEVMEM_IOCTL_MAGIC, 4)
+#define DEVMEM_IOCTL_SCTLR      _IO(DEVMEM_IOCTL_MAGIC, 5)
+
+int dump_all_ttbr0(char __user * dest) {
+    int processes = 0;
+    struct task_struct * curr;
+    unsigned long phys_pgd;
+
+    rcu_read_lock();
+
+    list_for_each_entry_rcu(curr, &init_task.tasks, tasks) {
+        if(curr->mm) {
+            phys_pgd = virt_to_phys(curr->mm->pgd);
+        }
+        else {
+            phys_pgd = 0;
+        }
+        if(put_user(phys_pgd, (unsigned long __user *) dest)) {
+            return -EFAULT;
+        }
+        dest += sizeof(pgd_t *);
+
+        if(copy_to_user(dest, curr->comm, TASK_COMM_LEN)) {
+            return -EFAULT;
+        }
+        dest += TASK_COMM_LEN;
+
+        ++processes;
+    }
+		
+    rcu_read_unlock();
+
+    return processes;
+}
+
+static long ioctl_mem(struct file * file, unsigned cmd,
+        unsigned long arg) {
+    long result = 0;
+
+    if(_IOC_TYPE(cmd) != DEVMEM_IOCTL_MAGIC) {
+        return -ENOTTY;
+    }
+
+    switch(cmd) {
+        case DEVMEM_IOCTL_TTBCR:
+            asm ( "mrc p15, 0, %0, c2, c0, 2" : "=r" (result) );
+            break;
+
+        case DEVMEM_IOCTL_TTBR1:
+            asm ( "mrc p15, 0, %0, c2, c0, 1" : "=r" (result) );
+            break;
+        
+        case DEVMEM_IOCTL_TTBR0:
+            asm ( "mrc p15, 0, %0, c2, c0, 0" : "=r" (result) );
+            break;
+        
+        case DEVMEM_IOCTL_SCTLR:
+            asm ( "mrc p15, 0, %0, c1, c0, 0" : "=r" (result) );
+            break;
+
+        case DEVMEM_IOCTL_TTBR0_ALL:
+            printk("Dumping all ttbr0 values, requested by %u[%s]!\n",
+                    current->pid, current->comm);
+            return dump_all_ttbr0((char __user *) arg);
+
+        default:
+            return -ENOTTY;
+    }
+
+    force_successful_syscall_return();
+    return result;
+}
+
+#endif /* CONFIG_DEVMEM_ARM_VMSA */
+
 #endif	/* CONFIG_DEVMEM */
 
 #ifdef CONFIG_DEVKMEM
@@ -761,6 +848,7 @@ static const struct file_operations mem_fops = {
 	.mmap		= mmap_mem,
 	.open		= open_mem,
 	.get_unmapped_area = get_unmapped_area_mem,
+    .unlocked_ioctl = ioctl_mem,
 };
 #endif
 
